type Mutation{
    createPatient(patientDTO: PatientDTO!):ApiResponse!
    updatePatientById(patientDTO: PatientDTO!,patientId:String!):ApiResponse!
    deletePatientById(patientId:String!):ApiResponse!
    createDoctor(doctorDTO: DoctorDTO!): ApiResponse!
    updateDoctorById(doctorDTO: DoctorDTO!, doctorId:String!):ApiResponse!
    deleteDoctorById(doctorId:String!):ApiResponse!
    createAppointment(appointmentDTO:AppointmentDTO!):ApiResponse!
    updateAppointment(appointmentId:String!,date:String!,time:String!):ApiResponse!
    deleteAppointment(appointmentId:String!):ApiResponse!
}
input PatientDTO{
    patientId:String!
    patientName:String!
    patientContactNumber:[String]
    age:Int!
    illness:[String]!

}
input DoctorDTO{
    doctorId:String!
    doctorName:String!
    specialization:String!
    doctorContactNumber:[String]!
    channellingFee:Float!
    conditionOrDisease:[String]!
    patientsPerDay:Int!

}
type ApiResponse{
    code:String!
    message:String!
    data:[Patient]
    data2:[Doctor]
    data3:[Appointment]
}


type Patient{
    patientId:String!
    patientName:String!
    patientContactNumber:[String]
    age:Int!
    illness:[String]!


}
type Doctor{
    doctorId:String!
    doctorName:String!
    specialization:String!
    doctorContactNumber:[String]!
    channellingFee:Float!
    conditionOrDisease:[String]!
    patientsPerDay:Int!

}

type Appointment{
    appointmentId:String!
    doctor:[Doctor]!
    patient:[Patient]!
    date:String!
    time:String!
}
input AppointmentDTO{
    doctorId:String!
    patientId:String!
    date:String!
    time:String!
}